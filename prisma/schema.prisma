// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id Int @id @default(autoincrement()) @map("user_id")
  email String @unique @map("email")
  password String @map("password")
  name String @map("name")
  role UserRole @default(APPLICANT) @map("role")

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  resumes resumes[]
  resume_histories resume_histories[]
  refresh_tokens refresh_tokens?

  @@map("users")
}

enum UserRole {
  APPLICANT
  RECRUITER
}

model resumes {
  resume_id Int @id @default(autoincrement()) @map("resume_id")
  user_id Int @map("user_id")
  title String @map("title")
  content String @db.Text @map("content")
  status ApplyStatus @default(APPLY) @map("status")

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  resume_histories resume_histories[]

  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("resumes")
}

enum ApplyStatus {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model resume_histories {
  resume_history_id Int @id @default(autoincrement()) @map("resume_history_id")
  recruiter_id Int @map("recruiter_id")
  resume_id Int @map("resume_id")
  old_status String @map("old_status")
  new_status String @map("new_status")
  reason String @map("reason")

  created_at DateTime @default(now()) @map("created_at")

  user users @relation(fields: [recruiter_id], references: [user_id], onDelete: Cascade)
  Resume resumes @relation(fields: [resume_id], references: [resume_id], onDelete: Cascade)

  @@map("resume_histories")
}

model refresh_tokens {
  refresh_token_id Int @id @default(autoincrement()) @map("refresh_token_id")
  user_id Int @unique @map("user_id")
  token String @map("token")

  created_at DateTime @default(now()) @map("created_at")

  user users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("refresh_tokens")
}