// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  userId   Int      @id @default(autoincrement()) @map("user_id")
  email    String   @unique @map("email")
  password String   @map("password")
  name     String   @map("name")
  role     UserRole @default(APPLICANT) @map("role")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  resumes          resumes[]
  resume_histories resumeHistories[]
  refresh_tokens   refreshTokens?

  @@map("users")
}

enum UserRole {
  APPLICANT
  RECRUITER
}

model resumes {
  resumeId Int         @id @default(autoincrement()) @map("resume_id")
  userId   Int         @map("user_id")
  title    String      @map("title")
  content  String      @map("content") @db.Text
  status   ApplyStatus @default(APPLY) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  resume_histories resumeHistories[]

  user users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("resumes")
}

enum ApplyStatus {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model resumeHistories {
  resumeHistoryId Int    @id @default(autoincrement()) @map("resume_history_id")
  recruiterId     Int    @map("recruiter_id")
  resumeId        Int    @map("resume_id")
  oldStatus       String @map("old_status")
  newStatus       String @map("new_status")
  reason          String @map("reason")

  createdAt DateTime @default(now()) @map("created_at")

  user   users   @relation(fields: [recruiterId], references: [userId], onDelete: Cascade)
  Resume resumes @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("resume_histories")
}

model refreshTokens {
  refreshTokenId Int    @id @default(autoincrement()) @map("refresh_token_id")
  userId         Int    @unique @map("user_id")
  token          String @map("token")

  createdAt DateTime @default(now()) @map("created_at")

  user users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("refresh_tokens")
}
